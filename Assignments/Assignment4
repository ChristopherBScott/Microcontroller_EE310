//-----------------------------
// Title: Assignment4.asm
//-----------------------------
// Purpose: To operate a very basic temperature control system, storing register
//	 values based on a user input as well as a measured value
// Dependencies: NONE
// Compiler: MPLABX IDE v6.20
// Author: Christopher Scott
// OUTPUTS: PORTD1, PORTD2,
// INPUTS: keypad, temperature sensor 
// Versions:
//  	V1.0: 3/1/2024 - First Version
//	V2.0: 3/2/2024 - Updated Version
//	V3.0: 3/3/2024 - Everything is broken Version
//	V4.0: 3/4/2024 - EVERYTHING IS EVEN MORE BROKEN Version
//	V5.0: 3/6/2024 - it finally works
//----------------------------- 

;---------------------
; Initialization
;---------------------    
include "C:\Users\robot\OneDrive\Desktop\EE310\Assignment4.X\AssemblyConfig.inc"
#include <xc.inc>

;----------------
; PROGRAM INPUTS
;----------------
#define	refTemp	15
#define	measuredTemp	0

;----------------
; REGISTERS
;----------------
#define	refTempREG 0x20
#define	measuredTempREG	0x21
#define	contREG	0x22

;----------------
; PROGRAM OUTPUTS
;----------------
#define	refTempInputDecimalREG  0x60 
#define	measuredTempDecimalREG  0x70 
#define	HEATER    PORTD,1
#define	COOLER    PORTD,2
CalcMeasuredTempREG EQU 0x10
CalcRefTempREG EQU 0x11
QU EQU 0x19 ;REG location for quotient

;---------------------
; Main Program
;---------------------
    PSECT absdata,abs,ovrld        ; Do not change

    ORG	0                ;Reset vector
    GOTO    start
    ORG 0x20
    
start:
    ;STORE VALUES
    MOVLW   0
    MOVWF   TRISD,0
    MOVLW   measuredTemp
    MOVWF   measuredTempREG
    MOVWF   CalcMeasuredTempREG
    MOVLW   refTemp
    MOVWF   refTempREG
    MOVWF   CalcRefTempREG
  
    
    
    
    
    
    ;STORE DECIMAL VERSION OF MEASURED TEMP
    MOVLW   10 ;WREG = 10, the denominator 
    CLRF    QU ;clear quotient
D_1:
    INCF    QU,1 ;increment quotient for every sub 
    SUBWF   CalcMeasuredTempREG ;Sub WREG from CalcMeasuredTempREG value 
    BC	D_1 ;if positive go back (C = 1 for positive) 
    ADDWF   CalcMeasuredTempREG,1 ;once too many, this is our first digit 
    DECF    QU,1 ;once too many for quotient 
    MOVFF   CalcMeasuredTempREG, 0x70 ;save the first digit 
    MOVFF   QU, CalcMeasuredTempREG ;repeat the process one more time 
    CLRF    QU ;clear QU 
D_2:
    INCF    QU,1 
    SUBWF   CalcMeasuredTempREG,1 ;8Ub WREG from CalcmeasuredTempREG value
    BC	D_2 ; (C = 1 for positive) 
    ADDWF   CalcMeasuredTempREG,1
    DECF    QU, 1 ;once too many 
    MOVFF   CalcMeasuredTempREG, 0x71 ; 2nd digit
    MOVFF   QU, 0x72 ;3rd digit 
    
    
    ;STORE DECIMAL VERSION OF REF TEMP
    MOVLW   10 ;WREG = 10, the denominator 
    CLRF    QU ;clear quotient
D_3:
    INCF    QU,1 ;increment quotient for every sub 
    SUBWF   CalcRefTempREG ;Sub WREG from CalcRefTempREG value 
    BC	D_3 ;if positive go back (C = 1 for positive) 
    ADDWF   CalcRefTempREG,1 ;once too many, this is our first digit 
    DECF    QU,1 ;once too many for quotient 
    MOVFF   CalcRefTempREG, 0x60 ;save the first digit 
    MOVFF   QU, CalcRefTempREG ;repeat the process one more time 
    CLRF    QU ;clear QU 
D_4:
    INCF    QU,1 
    SUBWF   CalcRefTempREG,1 ;8Ub WREG from CalcRefTempREG value
    BC	D_4 ; (C = 1 for positive) 
    ADDWF   CalcRefTempREG,1
    DECF    QU, 1 ;once too many 
    MOVFF   CalcRefTempREG, 0x61 ; 2nd digit
    MOVFF   QU, 0x62 ;3rd digit 
    
    
    MOVLW   0x0
    MOVWF   CalcRefTempREG
    MOVWF   CalcMeasuredTempREG
    
    
    
    ;CHECK IF MEASURED IS A NEGATIVE VALUE
    CLRF    STATUS
    MOVLW   0x0
    MOVF   measuredTempREG,0
    BN	LED_HOT
    
    ;COMPARE
    MOVLW   refTemp
    CPFSGT  measuredTempREG
    GOTO    next1
    GOTO    LED_COOL
next1:
    CPFSLT  measuredTempREG
    GOTO    next2
    GOTO    LED_HOT
    
    ;AT THIS POINT, THEY MUST BE EQUAL, SO ALL OFF
next2:
    MOVLW   0
    MOVWF   contREG
    BCF	    PORTD,1
    BCF	    PORTD,2
    GOTO    theend
    
    
LED_HOT:	
    MOVLW   1
    MOVWF   contREG
    BCF	    PORTD,2
    BSF	    PORTD,1
    GOTO    theend
    
LED_COOL:
    MOVLW   2
    MOVWF   contREG
    BCF	    PORTD,1
    BSF	    PORTD,2
    GOTO    theend

theend:
    sleep
