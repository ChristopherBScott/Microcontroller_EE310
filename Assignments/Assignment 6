;---------------------
; Title: Counter Design
;---------------------
; Program Details:
; The purpose of this program is to have a 7 segment deisplay count up or down
; depending on if it is receiving an input from one of two switches.  
; Inputs: Port B (specifically RB3 & RD4)
; Outputs: PortD (specifically RD0-RD6)
; Date: March 21, 2024
; Compiler: MPLAB X IDE v6.2
; Author: Christopher Scott
; Versions:
;       V4.0: Full working version, bug tested
    
#include "C:\Users\robot\OneDrive\Desktop\EE310\A6B.X\Assembly_HeaderFile.inc"
#include <xc.inc>
    
    PSECT absdata,abs,ovrld        ; Do not change
    
;---------------------
; Program Inputs
;---------------------
    Inner_loop  equ 255   // these two define how long (150?)
    Outer_loop  equ 255   //the delay loop will last   (100?)
 
;---------------------
; Program Constants
;---------------------
    Inner_count equ	0x30 ;just registers to hold count
    Outer_count equ	0x31 ;just registers to hold count

 ;--------------------
 ; Initial Setup
 ;--------------------
    ORG 0x10
    
    call    saveVal ;save possible outputs into file registers
    
    ;setup input and output ports
    BANKSEL	PORTD ;
    CLRF	PORTD ;Init PORT
    BANKSEL	LATD ;Data Latch
    CLRF	LATD ;
    BANKSEL	ANSELD ;
    CLRF	ANSELD ;digital I/O
    BANKSEL	TRISD ;
    MOVLW	0b00000000 ;Set RD as all outputs
    MOVWF	TRISD
    BANKSEL	PORTB ;
    CLRF	PORTB ;Init PORT
    BANKSEL	LATB ;Data Latch
    CLRF	LATB ;
    BANKSEL	ANSELB ;
    CLRF	ANSELB ;digital I/O
    BANKSEL	TRISB ;
    MOVLW	0b00011000 ;Set RB3 and 4 as inputs
    MOVWF	TRISB 
    
    ;establish pointer
    CLRF    FSR0L
    CLRF    FSR0H
    LFSR    0, 0x10 ;point at value to display 0 at REG10
    CALL    loopDelay 
 
 
    
  
    
    
    
    
;---------------------
; Main Program
;---------------------      
start:
    BTFSC   PORTB,3 ;check if button A is being pressed
    GOTO    Ahigh ;A is high, so being pressed
    GOTO    Alow ;A is low, so not being pressed
back2main:
    MOVFF   INDF0, PORTD ;display pointer value on 7 segment
    MOVFF   INDF0, 0x60 ; display pointer value in registers for testing
    CALL    loopDelay
    CALL    loopDelay
    GOTO    start
    
    
    
Ahigh:
    BTFSC   PORTB,4 ;check if button B is also pressed
    GOTO    zeroOut
    ;if here, then only A is being pressed
    DECF    FSR0L,F
    MOVLW   0x0F
    CPFSEQ  FSR0L
    GOTO    back2main
    LFSR    0, 0x1F ;pointer was at a 0, so need to move to 'F'
    GOTO    back2main

zeroOut:
    LFSR    0, 0x10 ;point at value to display 0 at REG10
    GOTO    back2main
    
Alow:
    BTFSC   PORTB,4 ;check if button B is also pressed
    GOTO    onlyB ;only B is pressed   
    ;if here, nothing has been pressed
    GOTO    back2main ;hold current val
    
onlyB:
    ;if here, B is the only one being pressed
    INCF    FSR0L,F
    MOVLW   0x20
    CPFSEQ  FSR0L
    GOTO    back2main
    LFSR    0, 0x10 ;it reached a 0, so need to wrap back to 0x10
    GOTO    back2main
    
    
    
;-----The Delay Subroutine    
loopDelay: 
    MOVLW   Inner_loop
    MOVWF   Inner_count
    MOVLW   Outer_loop
    MOVWF   Outer_count
;_loop1:
;    DECF        Inner_count,1 // inner loop
;    BNZ         _loop1
;    ;DECF        Outer_count,1 // outer loop
;    ;BNZ        _loop1
;    RETURN
_loop1:
    DECF    Inner_count,1
    BNZ	    _loop1
    MOVLW   Inner_loop
    MOVWF   Inner_count
    DECF    Outer_count,1
    BNZ	    _loop1
    RETURN
    
    
    
    
saveVal:
    movlw   0x3F
    movwf   0x10
    movlw   0x06
    movwf   0x11
    movlw   0x5B
    movwf   0x12
    movlw   0x4F
    movwf   0x13
    movlw   0x66
    movwf   0x14
    movlw   0x6D
    movwf   0x15
    movlw   0x7D
    movwf   0x16
    movlw   0x07
    movwf   0x17
    movlw   0x7F
    movwf   0x18
    movlw   0x67
    movwf   0x19
    movlw   0x77
    movwf   0x1A
    movlw   0x7C
    movwf   0x1B
    movlw   0x39
    movwf   0x1C
    movlw   0x5E
    movwf   0x1D
    movlw   0x79
    movwf   0x1E
    movlw   0x71
    movwf   0x1F
    movlw   0x0
    return
    
    ;ORG	0x100
    ;DB	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07
    ;DB	0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5D, 0x79, 0x71
    
    END
